
+ task: remove check for 'declaration->enclosing' in LEFTBRACE of class-specifier
+ task: assert result of findEnclosingType is not 0
+ task: assert Type::unique is valid when checking Type::isDependent
+ crash: infinite loop in findDeclaration, type is base of base of itself
	- struct D : B {}; struct B : D {};
	- use visited flag to prevent infinite recursion
+ assert: D:\dev\cpparch\cppparse\msvc-8.0\include\xdebug:110
	- instantiation of basic_string<char, char_traits<char>, _DebugHeapAllocator<char> > in base-specifier of _DebugHeapString
	- when instantiated at point of declaration of _DebugHeapString, unique-type differs to instantiation in base-specifier
	- second template argument has a different type: iosfwd:155 char_traits<T> vs iosfwd:406 char_traits<char>
	- occurs because type was uniqued with 'allowDependent' when it was not dependent
+ assert: D:\dev\cpparch\cppparse\msvc-8.0\include\xlocale:347 (iostream.prepro.cpp:6966:25)
	- instantiation of std::string in return value of Locinfo::Getname()
	- when instantiated at overload resolution for Getname(), unique-type differs to instantiation in declaration
	- second template argument has a different type: new: char_traits<T> vs original: char_traits<char>
	- occurs because type was uniqued with 'allowDependent' when it was not dependent
+ task: make-unique for all types at point of parse, allowDependent=true for unique types
	- set isDependent=true on Type if dependent, do not look up names in base classes with isDependent=true
+ task: make-unique the enclosing type even when it's a template
	- always allow dependent if it's a template
+ task: use enclosing scope to determine whether type name is name of enclosing class
+ task: modify instantiateClass to instantiate base classes of the enclosing template class
	- also instantiate dependent base classes, but don't add them to the list if allowDependent=true
	- is allowDependent=true in context where base classes are no longer dependent?
		- e.g. D<int>::B
+ task: use the 'type' of a class definition to store unique-type
+ task: proper type for enumerators, instead of gEnumerator
+ problem: ambiguity in template-argument between assignment-expression and type-id: `T()` and `T(arg)`
	- trying 'type-id' first is correct in former, wrong in latter
	- vice versa for assignment-expression
	- `[temp.arg]` In a template argument, an ambiguity between a typeid and an expression is resolved to a typeid,
		regardless of the form of the corresponding template parameter
	- detect ambiguous expression and explicitly mark with `isTemplateArgumentAmbiguity`
+ test: parsing f(x,...)
+ investigate: how does bidirectional_map work?
	- multi_index_container -> multi_index_base_type<...>::type -> nth_layer<0, ...>::type
		- nth_layer::type = apply2<index_applier, T1, T2>::type
			- apply2<F, T1, T2> -> lambda<F>::type::apply<T1, T2> -> F::apply<T1, T2>
		- index_applier::apply<T1, T2>::type -> T1::type::index_class<T2>::type
			- T1 = at_c<IndexSpecifierList, N>
			- T2 = nth_layer<N+1, ...>
			-> at_c<IndexSpecifierList, N>::type::index_class<nth_layer<N+1, ...>>::type
		- IndexSpecifier list: either ordered_unique or ordered_non_unique
		- ordered_unique::index_class<T1>::type -> ordered_index<T1 ...>::type
		- why is 'length' 20?
			- indexed_by is a vector20
			- vector<T1, T2, na, ..> should be vector2!

+ task: uniquing of dependent template-name: `T::template X<int>`

+ task: correct name lookup for template explicit/partial specializations
	- `[temp.class.spec]` Partial specialization declarations themselves are not found by name lookup.
	- `[temp.class.spec.match]` When a class template is used in a context that requires an instantiation of the class, it is necessary to determine
			whether the instantiation is to be generated using the primary template or one of the partial specializations.
		- implies that this is not determined (e.g. no argument deduction is performed) until the class template is instantiated?
	- don't add to declarations? If not, where to store Declaration?
	- add, but ignore during name lookup?
		- inefficient, but works
	- store list of specializations in primary template
		- modifying existing declaration when specialization is declared is hard to undo when specialization is undeclared
	- forward declaration of partial specialization is invisible?
+ task: in makeUniqueType, use previously uniqued type if available and isDependent=false.
	+ assert that previously uniqued type is equal to result of makeUniqueType
		- can only do this if both the previously uniqued type and the result of makeUniqueType are not dependent
	- in declaration with dependent type, store index into array of dependent member types
		- build array of dependent member types on parse, stored in enclosing dependent unique-type
		- when instantiating unique-type, fill array with member unique-types
	+ perform type substitution on dependent unique-type
		- DependentType: substitute template parameter from enclosing type for argument
		- DependentTypename: perform name lookup to find member-declaration
			- if member-declaration is class-declaration, build simple ObjectType from declaration
			- else if found member-declaration's Type has isDependent=false, use its unique-type
			- else look up unique-type in (instantiated) enclosing type
		- DependentTemplate: as above, plus stored template arguments
			- add default arguments to stored arguments if necessary, add to ObjectType
+ issue: out-of-line member function template definition is not determined to be template
	- because testing 'parent == templateEnclosing'
	- should test 'enclosing == templateEnclosing'?
		- but 'enclosing' refers to template-param scope
		- enclosing is the scope in which name lookup occurs
			- must include template-params in name lookup
	- test whether template-params were specified
		- empty params for explicit specialization
+ issue: ignoring difference in return type means two template functions that differ only by return-type (and template-params) are considered equivalent
	- this is a hack for case where return-type is a typename - template<typename U> typename S<U>::Type S<U>::f() {}
	- ignore return type and compare template params instead
	
+ investigate: when resolving unique type of a declaration named by an id-expression, do we need an enclosing-type if the id-expression names a non-member?
	- if member, use type of enclosing class when resolving unique type of the member
	- if non-member, type cannot be dependent on an enclosing class?
		- could be dependent on template parameter of enclosing template function
	- therefore answer is yes
+ task: ADL should ignore everything but functions and function templates
+ task: allow undeclared bare-identifier followed by (params), assume to be found via ADL
	- disallow undeclared[], undeclared.m, undeclared.~X(), undeclared++
+ task: assert (walker.type.declaration != 0) before addBase
+ task: built-in operator overload resolution for ptr-to-member expression
+ task: clean up makeUniqueType
	- remove redundant code
+ task: rename TypeInstance
	+ merge TypeInstance with ObjectType
		- new name: not an object type
		- class type or built-in type - terminates declarator
		- SimpleType, as in simple-type-specifier


- investigate: can explicit/partial-specializations omit template arguments where there are defaults in the primary template?
	- clang allows with c++98

- investigate: is typename required in conversion-function-id: operator T::Dependent?
	- yes - perhaps research to confirm?

- investigate: is there ever a need to compare two function templates with different numbers of parameters when determining partial ordering?

- investigate: partial specializations: how to substitute template-arguments when uniquing
- investigate: what is the dependent unique-type of a template-partial-specialization?
	- A<T*> where T is the enclosing template parameter?
	- ok to resolve specialization of a dependent unique-type?
	- necessary to correctly unique the enclosing class when parsing a template-partial-specialization

- investigate: is result of `makeUniqueType` cached during cached-parse of template-id?

- investigate: `isMemberObject` returns true if member is class definition?
	- is this a problem?

- investigate: is `Declaration::valueDependent` necessary? Why is it initialised with dependent-ness of it's type's array size?

- problem: `findEnclosingType` searches bases of incomplete class when within class definition
	- don't use instantiateClass to enable this search: search non-dependent bases if..
		- class is an enclosing template
	- return enclosing type from findDeclaration
		- why?

- issue: parser loses track of current token just after parsing last token of default-parameter (and other deferred parse?)
	- syntax error at last token of deferred-parse block results in invalid parser location

- task: construct templateParamScope when parsing 'template' token
	- construct empty template param scope for explicit specialization?

- task: avoid having to revert changes to TypeId in between parsing multiple declarators in init-declarator-list
	- in SimpleDeclarationWalker

- task: when complete type is required and type is dependent, add type to children list in enclosing template class

- task: refactor PARSE_EXPRESSION

- task: check for undesired forward declaration of 'A' in elaborated type specifier: template<class T> friend struct N::A;

- task: improve: ptr-to-member expression: built-in candidates for overload resolution
	- cull invalid candidates (e.g. incompatible class type between arguments, incompatible const)
		- could break in case of passing class-type args, which can also be converted to `C*` or `T C::*`
	- write tests

- task: overload resolution for built-in assignment operator

- task: detect when expression 'enum < 0' (otherwise constant) would call an overloaded operator
	- expression should longer be constant

- task: don't find friend function definition via normal lookup, only via ADL
	- friend that "declares a namespace-scope function" means?
		- e.g. friend void f() {}
		- declares global 'f', not visible to normal lookup
		- always filter out of name lookup
	`[class.friend]` A friend function defined in a class is in the (lexical) scope of the	
	class in which it is defined. A friend function defined outside the class is not

	Name lookup for a name used in the definition of a friend function (11.3) defined inline in the class granting
	friendship shall proceed as described for lookup in member function definitions. If the friend function is
	not defined in the class granting friendship, name lookup in the friend function definition shall proceed as
	described for lookup in namespace member function definitions.


- investigate: function-scope using directive?
	- supported?

- task: `template<bool b, int x = sizeof(b)>`
	- must defer evaluation of template parameter default until context is known?
	- should be evaluated immediately as is non-dependent?
	- value is not required for correct parse 

- investigate: evaluate enclosing-class for id-expression that names member when parsed?
	- if unqualified, depends on context: object-expression or enclosing-class
	- must also evaluate whether it's a pointer-to-member expression `&C::m` when parsed.


- investigate: when checking whether identifier in template-id is template-name, is it safe to re-use the result of name-lookup rather than performing lookup again?
	- would break name-hiding of class-template by function-template, but that's consistent with other implementations
	- probably need to unify qualified name lookup between declarator and non-declarator anyway
	- check rule: lookup of name found after :: finds only namespace or type names
		- could find function-template name

- investigate: in `template<> struct A::B<int> {};` lookup of `B` fails because `A` is not considered as the qualifying name?

- investigate: special handling for declarator name lookup still required?


- task: remove circular dependency: evaluateExpression in OverloadResolver::makeConversion

- investigate: requirements for evaluation of type of Nth template parameter in body of explicit specialization of function template


- issue: what should type of enumerator be during deferred evaluation?
	- e.g. enum { A = TEMPLATE_NONTYPE_PARAM, B = sizeof(A) };

- issue: prevent searching for overloaded operator + during deferred evaluation of enum value
	- e.g. enum { A, B }; 

- investigate: can we cache the fact that a parse of a given symbol failed? To avoid retrying the same symbol.
	- basic test: pathologically slow for typelists?
	- means cache will have many more entries?
	- alternative data structure for caching failures?

- issue: long codegen time for debug build
	- since switching from std::vector to SharedVector?

- task: FORCEINLINE trivial get/operator->/operator*/asBase

